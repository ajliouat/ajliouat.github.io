# Portfolio Website Source Repository

This is the private source repository for the personal portfolio website hosted at [ajliouat.com](https://ajliouat.com). This repository contains all the Jekyll source files, while the public repository [ajliouat.github.io](https://github.com/ajliouat/ajliouat.github.io) only contains the built static site.

## Table of Contents

1. [Overview](#overview)
2. [Website Structure](#website-structure)
3. [Development Setup](#development-setup)
4. [Deployment Process](#deployment-process)
5. [Content Management](#content-management)
6. [Dual README System](#dual-readme-system)
7. [Deployment Script Explained](#deployment-script-explained)
8. [Styling and Design](#styling-and-design)
9. [Maintenance](#maintenance)
10. [Conclusion](#conclusion)

## Overview

The website is a Jekyll-based portfolio site primarily focused on showcasing machine learning engineering projects. It features:

- A clean, minimalist design
- Responsive layout
- Project portfolio with detailed project pages
- About and Contact sections
- GitHub integration for project source code linking

## Website Structure

The website follows a standard Jekyll structure with some customizations and uses a dual-repository approach:

1. **Private Repository (`blog-source`)**:
   - Contains all source code, configuration files, and content.
   - This repository is **private**, so your raw source code is not accessible to the public.

2. **Public Repository (`ajliouat.github.io`)**:
   - Contains only the **built static site** (e.g., HTML, CSS, JS) generated by Jekyll.
   - This is what GitHub Pages serves to visitors.
   - This repository is **public**, so your website is accessible to everyone.

### File and Directory Structure

```
ajliouat.github.io/
│   ├── CNAME                    # Domain configuration
│   ├── Gemfile                  # Ruby dependencies
│   ├── README.md                # This file (private repo documentation)
│   ├── readme-public.md         # Public README file with Jekyll front matter
│   ├── _config.yml              # Jekyll configuration
│   ├── _includes/               # Reusable HTML components
│   │   ├── head.html            # HTML head with CSS
│   │   ├── header.html          # Navigation header
│   ├── _layouts/                # Page templates
│   │   ├── default.html         # Default page layout
│   │   ├── project.html         # Project page layout
│   ├── about.md                 # About page content
│   ├── contact.md               # Contact page content
│   ├── index.md                 # Homepage content
│   ├── projects/                # Project pages directory
│   │   ├── index.md             # Projects list page
│   │   ├── project-*.md         # Individual project pages
│   ├── scripts/                 # Helper scripts
│   │   ├── local/               # Local development scripts
│   │   ├── prod/                # Production deployment scripts
```

### Key Files and Directories

- **_config.yml**: Central configuration file for Jekyll. Contains site title, description, URL, and build settings.
- **_includes/**: Contains reusable HTML components like headers and footers.
- **_layouts/**: Contains templates for different types of pages.
- **projects/**: Contains markdown files for each project with front matter metadata.
- **scripts/**: Contains utility scripts for local development and deployment.

## Development Setup

### Prerequisites

1. **Git**:
   ```bash
   brew install git
   ```

2. **Ruby and Jekyll**:
   ```bash
   brew install ruby
   gem install jekyll bundler
   ```

3. **SSH Keys**:
   - Generate a new SSH key:
     ```bash
     ssh-keygen -t ed25519 -C "your_email@example.com"
     ```
   - Add the SSH key to your SSH agent:
     ```bash
     ssh-add ~/.ssh/id_ed25519
     ```
   - Add the SSH key to your GitHub account

### Initial Setup

1. Clone the private repository:
   ```bash
   git clone git@github-ajliouat:ajliouat/blog-source.git ajliouat.github.io
   cd ajliouat.github.io
   ```

2. Install dependencies:
   ```bash
   bundle install
   ```

3. Run locally:
   ```bash
   bundle exec jekyll serve
   ```

4. Visit http://localhost:4000 to preview

## Deployment Process

The deployment process uses a dual-repository approach to keep source code private while publishing the built site:

1. **Local Development**:
   - Make changes to the source files
   - Test locally using `bundle exec jekyll serve`
   - Commit changes

2. **Deployment**:
   - Run the deployment script: `./scripts/prod/deploy.sh`
   - The script builds the site, pushes source to the private repo, and built files to the public repo

3. **Verification**:
   - Check the private repository for source code updates
   - Check the public repository for the built site updates
   - Visit the website to ensure changes are live

## Content Management

### Editing Existing Pages

- Edit Markdown files (e.g., `about.md`, `index.md`) while preserving the front matter.
- Test changes locally before deploying.

### Adding a New Project

1. Create a new Markdown file in the `projects/` directory following the naming pattern `project-[number]-[name].md`.
2. Include required front matter:
   ```yaml
   ---
   layout: project
   title: Your Project Title
   tech_stack: Technology 1, Technology 2, Technology 3
   github_link: https://github.com/username/project-repo
   ---
   ```
3. Add project content below the front matter.
4. Test locally, then deploy.

## Dual README System

This repository uses a dual README approach to maintain different documentation for the private source repository and the public website repository:

1. **Private Repository README (`README.md`)**:
   - Located in the root directory of this repository
   - Contains comprehensive development documentation, setup instructions, and maintenance guidelines
   - Only visible to those with access to this private repository
   - Pushed to the private repository during deployment

2. **Public Repository README (`readme-public.md`)**:
   - Located in the root directory with Jekyll front matter
   - Contains a simplified introduction and professional profile information
   - Front matter (`permalink: /README.md`) instructs Jekyll to output this as README.md in the built site
   - This becomes the README visible on the public GitHub repository
   - Content focused on professional introduction rather than technical details

### How the Public README Works

The `readme-public.md` file includes special Jekyll front matter:

```md
---
permalink: /README.md
layout: none
---
```

This front matter instructs Jekyll to:
1. Process this file during build
2. Save the output as `README.md` in the root of the _site directory
3. Use no layout template (`layout: none`)

When the deployment script runs, this generated README.md gets copied to the public repository and becomes the visible README on GitHub.

## Deployment Script Explained

The `deploy.sh` script in `scripts/prod/` handles the complex process of maintaining two separate repositories. Here's a detailed step-by-step explanation of how it works:

### Step 1: Clean Up Redundant Files
```bash
rm -f index.html about.html contact.html blog/*.html
rm -f assets/main.css assets/main.css.map
rm -f _site/assets/main.css _site/assets/main.css.map
```
- Removes any generated HTML files that might conflict with Jekyll's build process
- Cleans up CSS files to ensure proper regeneration

### Step 2: Clean Jekyll Build Cache
```bash
bundle exec jekyll clean
```
- Removes the previous Jekyll build output
- Ensures a clean build with no stale artifacts

### Step 3: Clean CSS Files
```bash
find assets -type f -name "*.css" -exec rm -f {} \;
```
- Removes any compiled CSS files
- Forces Jekyll to process only the source SCSS files

### Step 4: Build the Site
```bash
bundle exec jekyll build
```
- Processes all source files through Jekyll
- Generates the static site in the `_site` directory
- Processes the `readme-public.md` file into `_site/README.md`

### Step 5: Sync with Private Repository
```bash
git pull private main || true
```
- Attempts to pull the latest changes from the private repository
- The `|| true` ensures the script continues even if there's nothing to pull

### Step 6: Update Private Repository
```bash
git add .
git commit -m "Update source code"
git push private main
```
- Commits all source changes
- Pushes the changes to the private repository (blog-source)
- This repository contains the full Jekyll source code

### Step 7-8: Create Temporary Directory
```bash
cd ..
rm -rf temp_public
mkdir temp_public
cd temp_public
git init
git remote add origin git@github-ajliouat:ajliouat/ajliouat.github.io.git
```
- Creates a clean temporary directory outside the current repository
- Initializes a new Git repository in this directory
- Connects it to the public GitHub repository

### Step 9: Copy Built Files
```bash
cp -r ../ajliouat.github.io/_site/* .
cp ../ajliouat.github.io/CNAME 2>/dev/null || true
```
- Copies only the built static site files from `_site`
- Also copies the CNAME file for custom domain support
- The public README (originally `readme-public.md`) is now `README.md` in these files

### Step 10: Update Public Repository
```bash
git add .
git commit -m "Deploy website - $(date)"
git branch -M main
git push -f origin main
```
- Commits all the built files
- Force pushes to the public repository, replacing its contents
- This repository now contains only the compiled website and public README

### Step 11: Clean Up
```bash
cd ../ajliouat.github.io
rm -rf ../temp_public
```
- Returns to the original repository
- Removes the temporary directory

## Styling and Design

The website uses custom CSS defined in `_includes/head.html`. Key style elements include:

1. **Color Scheme**:
   ```css
   :root {
     --primary-color: #2c3e50;
     --text-color: #2c3e50;
     --bg-color: #ffffff;
     --border-color: #edf2f7;
     --hover-color: #34495e;
   }
   ```

2. **Typography**:
   - Font family: Arial, sans-serif
   - Base font size: 14px
   - Heading sizes: 24px (h1), 20px (h2), 16px (h3), 14px (h4)
   - Line height: 1.6

3. **Components**:
   - Project Cards
   - Tech Tags
   - Buttons
   - Social Icons

## Maintenance

### Regular Updates

1. **Updating Jekyll and Dependencies**:
   ```bash
   bundle update
   ```

2. **Checking for Build Issues**:
   ```bash
   bundle exec jekyll build --trace
   ```

### Regular Maintenance Tasks

- Update project information
- Check for broken links
- Refresh tech stack tags
- Update personal information in the About page

## Conclusion

This manual provides a comprehensive guide to maintaining and updating your Jekyll-based portfolio website. By following these steps, you can ensure your website remains up-to-date, secure, and visually appealing. The dual-repository approach gives you the best of both worlds: private source code management with public website hosting. The automated deployment script simplifies the process, making updates quick and straightforward.